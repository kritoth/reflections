
git log        							// lists all the commits made
										// for debugging first find the commit with suspicious commits and find their id

git log --graph --oneline [master] [other-branch]	// lists the commits by visualizing the branches in arguments (without args all branches)

git diff [NUM_OF_OLDER] [NUM_OF_NEWER]  // compares two commits: the last is compared to the first
										// for example for debugging purposes after you chose the suspicious commit from the log list

git diff								// without argument it shows the difference between Working directory and Staging area

git diff --staged						// with --staged argument it shows the difference between Staging area and last commit

git commit  							// create a commit, ie. a snapshot of the current state of the files
										// you should make commits at reasonable intervals, ie when a task or logically binding group of tasks are finished
										// always write a reasonable comment to it

[Esc] :wq								// to Save&Exit from commit text editor

git commit -m "Commit message"			// to create a commit and also attach a created message to it, so there will be no text editor for the message

git init 								// initializes a git repository, not starting tracking

git status 								// lists the status of the repository you are in

git add [file_name]						// adding a file to the staging area, which is not the repository yeet, but an intermediary in between

git reset [file_name]					// removing file from the staging area

git branch 								// without arguments it lists the branches
										// it marks the current branch with asterix

git branch [new_branch_name]			// it creates a new branch with tha name of the arguments

git checkout [new_branch_name]			// it chekcs out to the branch in arguments

git checkout -b [new_branch_name]		// it combines the above two, ie creates a new branch and checks out to it

git remote								// lists the available remote repositories

git remote add [origin] [URL]			// adds the repository to remote, ie github server. The URL can be found on github.
										// The origin is the standard name if you have only 1 repository

git remote -v 							// shows details about the remote

git push [remote_name] [branch]			// sends (pushes) the current repository's commits reachable from the branch to the remote

git pull [remote_name] [branch]			// downloads (pulls) the current repository's commits reachable from the branch from the remote

git clone [URL]							// clones a remote repo to the local directory which you are in, at the same time it pulls the repo

git merge [branch be merged] [branch be merged into]	// merges two branches
														// eg. collaboration is doing through pull requests, so you always merge the local master into your branch if there is any new update is coming from the remote in order to push only your branch to the remote and let the others see what is your pull request

git fetch								// update local copy of the remote branch while leaving the modified local as it is
										// this is inside the git pull if conflicts exist, ie it first fetches then merges the fetched into to local master
